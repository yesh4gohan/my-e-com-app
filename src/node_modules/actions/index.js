import {
  FETCH_PHONES_START,
  FETCH_PHONES_SUCCESS,
  FETCH_PHONES_FAILURE,
  LOAD_PHONES_FAILURE,
  LOAD_PHONES_START,
  LOAD_PHONES_SUCCESS,
  FETCH_EACH_PHONES_START,
  FETCH_EACH_PHONES_SUCCESS,
  FETCH_EACH_PHONES_FAILURE,
  ADD_TO_CART_START,
  ADD_TO_CART_SUCCESS,
  ADD_TO_CART_FAILURE,
  DO_LOGIN,
  REMOVE_FROM_CART_SUCCESS
} from "actionTypes";

import {
  fetchPhones as fetchPhonesApi,
  fetchPhoneById as fetchPhoneByIdApi
} from "api";
import { getCartProducts } from "../selectors";
const PRODUCTS_PER_PAGE = 3;

export const fetchPhones = () => async dispatch => {
  dispatch({ type: FETCH_PHONES_START });
  try {
    const phones = await fetchPhonesApi();
    const phones_per_page = phones.filter(
      phone => phone.productNumber <= PRODUCTS_PER_PAGE
    );
    dispatch({
      type: FETCH_PHONES_SUCCESS,
      payload: phones_per_page
    });
  } catch (error) {
    dispatch({
      type: FETCH_PHONES_FAILURE,
      payload: error,
      error: true
    });
  }
};

export const loadMorePhones = products_count => async dispatch => {
  dispatch({
    type: LOAD_PHONES_START
  });
  try {
    const phones = await fetchPhonesApi();
    const phones_per_page = phones.filter(
      phone =>
        phone.productNumber > products_count &&
        phone.productNumber <= products_count + PRODUCTS_PER_PAGE
    );

    dispatch({
      type: LOAD_PHONES_SUCCESS,
      payload: phones_per_page
    });
  } catch (error) {
    dispatch({
      type: LOAD_PHONES_FAILURE,
      payload: error,
      error: true
    });
  }
};

export const fetchPhoneById = id => async dispatch => {
  dispatch({
    type: FETCH_EACH_PHONES_START
  });
  try {
    const phone = await fetchPhoneByIdApi(id);
    dispatch({
      type: FETCH_EACH_PHONES_SUCCESS,
      payload: phone
    });
  } catch (error) {
    dispatch({
      type: FETCH_EACH_PHONES_FAILURE,
      payload: error,
      error: true
    });
  }
};

export const addToCart = id => async (dispatch, getstate) => {
  dispatch({
    type: ADD_TO_CART_START
  });
  let stateTree = await getstate();
  let cart = stateTree.cart;
  // const compare = (prod1, prod2) => {
  //   if (prod1.productNumber < prod2.productNumber) {
  //     return -1;
  //   } else if (prod1.productNumber > prod2.productNumber) {
  //     return 1;
  //   }
  //   return 0;
  // };
  // cart && cart.sort(compare);
  // for (let i = 0; i < cart.length; i++) {
  //   let count = 0;
  //   for (let j = 0; j < cart.length; j++) {
  //     if(cart[i].productId === cart[j].productId){
  //         count++;
  //     }
  //   }
  //   if(count>1){
  //   Object.assign(cart[i],cart[i],{count:count});
  //   cartTemp.splice(i+1,count-1);
  //   }
  //   else{
  //     Object.assign(cart[i],cart[i],{count:1});
  //   }

  // }

  const cartProduct = await fetchPhoneByIdApi(id);
  if (cart.length) {
    // cart.map(product => {
    //   // Object.assign(product, product, { count: 1 });
    //   if (product.productId === id) {
    //     product.count++;
    //   }
    //   // else{
    //   //   try {
    //   //     let prom = new Promise(res => {
    //   //       Object.assign(cartProduct, cartProduct, { count: 1 });
    //   //       res();
    //   //     });
    //   //     prom.then(() => {
    //   //       dispatch({
    //   //         type: ADD_TO_CART_SUCCESS,
    //   //         payload: cartProduct
    //   //       });
    //   //     });
    //   //   } catch (error) {
    //   //     dispatch({
    //   //       type: ADD_TO_CART_FAILURE,
    //   //       payload: error,
    //   //       error: true
    //   //     });
    //   //   }
    //   // }
    // });
    // cart.map(cartProduct => {
    //   if()
    //})
    let flag = false;
  for(let i = 0; i<cart.length;i++){
    if(cart[i].productId === id){
      cart[i].count++;
      flag = true;
    }
  }
  if(!flag){
    try {
      let prom = new Promise(res => {
        Object.assign(cartProduct, cartProduct, { count: 1 });
        flag = false;
        res();
      });
      prom.then(() => {
        dispatch({
          type: ADD_TO_CART_SUCCESS,
          payload: cartProduct
        });
      });
    } catch (error) {
      dispatch({
        type: ADD_TO_CART_FAILURE,
        payload: error,
        error: true
      });
    }
  }
    
  } else {
    try {
        let prom = new Promise(res => {
          Object.assign(cartProduct, cartProduct, { count: 1 });
          res();
        });
        prom.then(() => {
          dispatch({
            type: ADD_TO_CART_SUCCESS,
            payload: cartProduct
          });
        });
      } catch (error) {
        dispatch({
          type: ADD_TO_CART_FAILURE,
          payload: error,
          error: true
        });
      }
  }
};

export const authenticate = val => dispatch => {
  dispatch({
    type: DO_LOGIN,
    payload: val
  });
};

export const removeFromCart = product => dispatch => {
  dispatch({
    type: REMOVE_FROM_CART_SUCCESS,
    payload: product
  });
};
